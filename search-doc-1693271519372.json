[{"title":"Getting Started with Hooks","type":0,"sectionRef":"#","url":"/Hooks/docs/intro","content":"Getting Started with Hooks Here are some quick links to get started using Hooks: Installation guideAPI Docs","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/Hooks/docs/installation","content":"","keywords":""},{"title":"Method 1 - Wally​","type":1,"pageTitle":"Installation","url":"/Hooks/docs/installation#method-1---wally","content":"Setup Wally by using wally init.Add howmanysmall/hooks as a dependency. [dependencies] Hooks = &quot;howmanysmall/hooks@^1.4.2&quot;  "},{"title":"Next​","type":1,"pageTitle":"Installation","url":"/Hooks/docs/installation#next","content":"Now, check out the API reference! "},{"title":"Hooks","type":0,"sectionRef":"#","url":"/Hooks/api/Hooks","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#functions","content":" "},{"title":"useAsync​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useAsync","content":"State Management &lt;/&gt; Hooks.useAsync( promiseOrGetPromise: Promise&lt;T&gt; | () → Promise&lt;T&gt;,-- The Promise to wrap. dependencies: {unknown}? ) → ( T?,-- The result of the Promise. unknown?,-- The error message of the Promise. Promise.Status-- The status of the Promise. ) useAsync wraps a Promise to a state. info Taken from here  "},{"title":"useClickOutside​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useClickOutside","content":"This item only works when running on the client. Client User Interface &lt;/&gt; Hooks.useClickOutside( onClick: () → (),-- A callback to call when a click or touch event is detected outside of the element. userInputTypes?: {Enum.UserInputType},-- A list of user input types to detect. Defaults to Enum.UserInputType.MouseButton1 and Enum.UserInputType.Touch. guiObjects?: {GuiObject }-- A list of elements to detect clicks outside of. Defaults to the element returned by useRef. ) → Ref&lt;GuiObject &gt;-- A ref to the element to detect clicks outside of. A hook used to detect click and touch events outside of specified element. Luau: local function Component() local visible, setVisible = React.useBinding(false) local ref = Hooks.useClickOutside(function() setVisible(false) end) return React.createElement(&quot;Frame&quot;, { AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromOffset(100, 100), Visible = visible, ref = ref, }) end   "},{"title":"useCurrentCamera​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useCurrentCamera","content":"This item only works when running on the client. Client &lt;/&gt; Hooks.useCurrentCamera( onChange?: (currentCamera: Camera ) → ()-- A callback that is called when the current camera changes. ) → Camera -- The current camera. A hook used for getting the current camera.  "},{"title":"useDelayedValue​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useDelayedValue","content":"State Management &lt;/&gt; Hooks.useDelayedValue( value: T,-- The value to delay. delayInSeconds: number-- The amount of time to delay the value by. ) → T-- The delayed value. A hook used for delaying a value.  "},{"title":"useExternalEvent​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useExternalEvent","content":"Lifecycle &lt;/&gt; Hooks.useExternalEvent( event: RBXScriptSignal ,-- The event to connect to. callback: (...any) → ()-- The callback to connect to the event. ) → () A hook that connects and disconnects a callback to an event. This is really just a fancy useEffect wrapper. Luau: local function Component() end   "},{"title":"useForceUpdate​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useForceUpdate","content":"Lifecycle &lt;/&gt; Hooks.useForceUpdate() → () → ()-- The function to call to force a re-render. A hook that creates a function used to force a component to re-render.  "},{"title":"useId​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useId","content":"State Management &lt;/&gt; Hooks.useId( staticId?: string-- A static id to use instead of a generated one. ) → string-- The generated id. The useId hook generates random id that persists across renders. Hook is usually used to bind input elements to labels. Generated random id is saved to ref and will not change unless component is unmounted.  "},{"title":"useMemoWithCleanup​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useMemoWithCleanup","content":"State Management &lt;/&gt; Hooks.useMemoWithCleanup( createValue: () → T,-- The function to create the value. cleanupValue: (value: T) → (),-- The function to clean up the value. dependencies?: {unknown}-- The dependencies to check for changes. ) → T-- The memoized value. A hook that memoizes a value and cleans it up when the dependencies change.  "},{"title":"usePrevious​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#usePrevious","content":"State Management &lt;/&gt; Hooks.usePrevious( value: T-- The value to store. ) → T?-- The previous value of the state. The usePrevious hook stores the previous value of a state in a ref, it returns undefined on initial render and the previous value of a state after rerender.  "},{"title":"useRainbowColorSequence​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useRainbowColorSequence","content":"UI Effects &lt;/&gt; Hooks.useRainbowColorSequence( parameters?: IParameters-- The parameters for the hook. ) → Binding&lt;ColorSequence &gt;-- The rainbow color sequence. An example hook that uses a rainbow color sequence.  "},{"title":"useRendersSpy​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useRendersSpy","content":"Lifecycle Debugging &lt;/&gt; Hooks.useRendersSpy() → number-- The amount of renders. Returns the amount of times the component has been rendered since mounting. This is a very useful hook for testing.  "},{"title":"useScale​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useScale","content":"This item only works when running on the client. Client UI &lt;/&gt; Hooks.useScale( scale: number,-- The scale to use for the UI element. goalSize: Vector2 | Vector3 -- The size of the UI element. Recommended to use Vector3 as it is faster. ) → Binding&lt;number&gt;-- The scale to use for the UI element. A hook used for scaling UI elements to fit the current screen.  "},{"title":"useShallowEffect​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useShallowEffect","content":"Lifecycle &lt;/&gt; Hooks.useShallowEffect( callback: () → (),-- The callback to run when the dependencies change. dependencies?: {unknown}-- The dependencies to compare. ) → () useEffect drop in replacement with dependencies shallow comparison. useShallowEffect works exactly like useEffect but performs shallow dependencies comparison instead of referential comparison.  "},{"title":"useStrokeScale​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useStrokeScale","content":"This item only works when running on the client. Client UI Effects &lt;/&gt; Hooks.useStrokeScale( pixelThickness?: number,-- The thickness of the stroke in pixels. Defaults to 1. relativeSize?: number-- The relative size of the screen. Defaults to 985. ) → Binding&lt;number&gt;-- The thickness of the stroke in pixels. A hook used to scale a stroke size based on the viewport size.  "},{"title":"useSyncExternalStore​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useSyncExternalStore","content":"Polyfill &lt;/&gt; Hooks.useSyncExternalStore( subscribe: (onStoreChange: () → ()) → () → (),-- A function that subscribes to the external store. getSnapshot: () → Snapshot-- A function that returns the current snapshot of the external store. ) → Snapshot-- The current snapshot of the external store. A polyfill for React 18's useSyncExternalStore hook. info For more info, check out the issue on the React 18 Working Group.  "},{"title":"useSyncExternalStoreWithSelector​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useSyncExternalStoreWithSelector","content":"Polyfill &lt;/&gt; Hooks.useSyncExternalStoreWithSelector( subscribe: (onStoreChange: () → ()) → () → (),-- A function that subscribes to the external store. getSnapshot: () → Snapshot,-- A function that returns the current snapshot of the external store. selector: (snapshot: Snapshot) → Selected,-- A selector function that is used to select a value from the snapshot. isEqual?: ( left: Selected, right: Selected ) → boolean-- A function used to determine if the selected value has changed. ) → Selected-- The selected value for the current snapshot of the external store. A polyfill for React 18's useSyncExternalStore hook that allows for a selector. info For more info, check out the issue on the React 18 Working Group.  "},{"title":"useTheme​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useTheme","content":"This item only works when running in the context of a plugin. Plugin &lt;/&gt; Hooks.useTheme() → ThemeData-- The current theme. A hook that returns the current theme. Used for Plugins.  "},{"title":"useUncontrolled​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useUncontrolled","content":"State Management &lt;/&gt; Hooks.useUncontrolled( input?: IUseUncontrolledInput&lt;T&gt;-- The input to use. ) → ( T,-- The value to use. (value: T) → (),-- The onChange handler to use. boolean-- Whether the component is controlled or not. ) Manage state of both controlled and uncontrolled components.  "},{"title":"useViewportSize​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useViewportSize","content":"This item only works when running on the client. Client &lt;/&gt; Hooks.useViewportSize( onChange?: (viewportSize: Vector2 ) → ()-- A callback that is called when the viewport size changes. ) → Binding&lt;Vector2 &gt;-- The current viewport size. A hook that returns the current ViewportSize of the CurrentCamera.  "},{"title":"useWhyDidYouUpdate​","type":1,"pageTitle":"Hooks","url":"/Hooks/api/Hooks#useWhyDidYouUpdate","content":"Debug &lt;/&gt; Hooks.useWhyDidYouUpdate( name: string,-- The name of the component. props: table-- The props of the component. ) → () Quickly see which prop changed and caused a re-render by adding a single line to the component. "},{"title":"Types","type":0,"sectionRef":"#","url":"/Hooks/api/Types","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Types","url":"/Hooks/api/Types#types","content":" "},{"title":"IRainbowColorSequenceParameters​","type":1,"pageTitle":"Types","url":"/Hooks/api/Types#IRainbowColorSequenceParameters","content":"&lt;/&gt; interface IRainbowColorSequenceParameters { Event?: RBXScriptSignal -- The event to connect to. Defaults to RunService.Heartbeat. IsPerformanceMode?: boolean-- Whether or not the hook should be in performance mode. Performance mode disables the effect entirely. Defaults to false. Visible?: boolean-- Whether or not the hook should be visible. Defaults to true. }   "},{"title":"IUseUncontrolledInput<T>​","type":1,"pageTitle":"Types","url":"/Hooks/api/Types#IUseUncontrolledInput<T>","content":"&lt;/&gt; interface IUseUncontrolledInput&lt;T&gt; { DefaultValue?: T-- Initial value for uncontrolled state. FinalValue?: T-- Final value for uncontrolled state when Value and DefaultValue are not provided. OnChange?: (value: T) → ()-- Controlled state onChange handler. Value?: T-- Value for controlled state. }   "},{"title":"ColorData​","type":1,"pageTitle":"Types","url":"/Hooks/api/Types#ColorData","content":"&lt;/&gt; interface ColorData { Default: Color3 -- The Enum.StudioStyleGuideModifier.Default Color3. Disabled: Color3 -- The Enum.StudioStyleGuideModifier.Disabled Color3. Hover: Color3 -- The Enum.StudioStyleGuideModifier.Hover Color3. Pressed: Color3 -- The Enum.StudioStyleGuideModifier.Pressed Color3. Selected: Color3 -- The Enum.StudioStyleGuideModifier.Selected Color3. }   "},{"title":"ThemeData​","type":1,"pageTitle":"Types","url":"/Hooks/api/Types#ThemeData","content":"&lt;/&gt; interface ThemeData { ThemeName: &quot;Dark&quot; | &quot;Light&quot; -- The name of the current theme. GetColor: ( StudioStyleGuideColor: Enum.StudioStyleGuideColor, StudioStyleGuideModifier?: Enum.StudioStyleGuideModifier ) → Color3 -- A function that returns a Color3 based on the given Enum.StudioStyleGuideColor and Enum.StudioStyleGuideModifier. AttributeCog: ColorData-- The Enum.StudioStyleGuideColor.AttributeCog theme entry. Border: ColorData-- The Enum.StudioStyleGuideColor.Border theme entry. BrightText: ColorData-- The Enum.StudioStyleGuideColor.BrightText theme entry. Button: ColorData-- The Enum.StudioStyleGuideColor.Button theme entry. ButtonBorder: ColorData-- The Enum.StudioStyleGuideColor.ButtonBorder theme entry. ButtonText: ColorData-- The Enum.StudioStyleGuideColor.ButtonText theme entry. CategoryItem: ColorData-- The Enum.StudioStyleGuideColor.CategoryItem theme entry. ChatIncomingBgColor: ColorData-- The Enum.StudioStyleGuideColor.ChatIncomingBgColor theme entry. ChatIncomingTextColor: ColorData-- The Enum.StudioStyleGuideColor.ChatIncomingTextColor theme entry. ChatModeratedMessageColor: ColorData-- The Enum.StudioStyleGuideColor.ChatModeratedMessageColor theme entry. ChatOutgoingBgColor: ColorData-- The Enum.StudioStyleGuideColor.ChatOutgoingBgColor theme entry. ChatOutgoingTextColor: ColorData-- The Enum.StudioStyleGuideColor.ChatOutgoingTextColor theme entry. CheckedFieldBackground: ColorData-- The Enum.StudioStyleGuideColor.CheckedFieldBackground theme entry. CheckedFieldBorder: ColorData-- The Enum.StudioStyleGuideColor.CheckedFieldBorder theme entry. CheckedFieldIndicator: ColorData-- The Enum.StudioStyleGuideColor.CheckedFieldIndicator theme entry. ColorPickerFrame: ColorData-- The Enum.StudioStyleGuideColor.ColorPickerFrame theme entry. CurrentMarker: ColorData-- The Enum.StudioStyleGuideColor.CurrentMarker theme entry. Dark: ColorData-- The Enum.StudioStyleGuideColor.Dark theme entry. DebuggerCurrentLine: ColorData-- The Enum.StudioStyleGuideColor.DebuggerCurrentLine theme entry. DebuggerErrorLine: ColorData-- The Enum.StudioStyleGuideColor.DebuggerErrorLine theme entry. DialogButton: ColorData-- The Enum.StudioStyleGuideColor.DialogButton theme entry. DialogButtonBorder: ColorData-- The Enum.StudioStyleGuideColor.DialogButtonBorder theme entry. DialogButtonText: ColorData-- The Enum.StudioStyleGuideColor.DialogButtonText theme entry. DialogMainButton: ColorData-- The Enum.StudioStyleGuideColor.DialogMainButton theme entry. DialogMainButtonText: ColorData-- The Enum.StudioStyleGuideColor.DialogMainButtonText theme entry. DiffFilePathBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffFilePathBackground theme entry. DiffFilePathBorder: ColorData-- The Enum.StudioStyleGuideColor.DiffFilePathBorder theme entry. DiffFilePathText: ColorData-- The Enum.StudioStyleGuideColor.DiffFilePathText theme entry. DiffLineNum: ColorData-- The Enum.StudioStyleGuideColor.DiffLineNum theme entry. DiffLineNumAdditionBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffLineNumAdditionBackground theme entry. DiffLineNumDeletionBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffLineNumDeletionBackground theme entry. DiffLineNumNoChangeBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffLineNumNoChangeBackground theme entry. DiffLineNumSeparatorBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffLineNumSeparatorBackground theme entry. DiffTextAddition: ColorData-- The Enum.StudioStyleGuideColor.DiffTextAddition theme entry. DiffTextAdditionBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffTextAdditionBackground theme entry. DiffTextDeletion: ColorData-- The Enum.StudioStyleGuideColor.DiffTextDeletion theme entry. DiffTextDeletionBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffTextDeletionBackground theme entry. DiffTextHunkInfo: ColorData-- The Enum.StudioStyleGuideColor.DiffTextHunkInfo theme entry. DiffTextNoChange: ColorData-- The Enum.StudioStyleGuideColor.DiffTextNoChange theme entry. DiffTextNoChangeBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffTextNoChangeBackground theme entry. DiffTextSeparatorBackground: ColorData-- The Enum.StudioStyleGuideColor.DiffTextSeparatorBackground theme entry. DimmedText: ColorData-- The Enum.StudioStyleGuideColor.DimmedText theme entry. DocViewCodeBackground: ColorData-- The Enum.StudioStyleGuideColor.DocViewCodeBackground theme entry. Dropdown: ColorData-- The Enum.StudioStyleGuideColor.Dropdown theme entry. DropShadow: ColorData-- The Enum.StudioStyleGuideColor.DropShadow theme entry. EmulatorBar: ColorData-- The Enum.StudioStyleGuideColor.EmulatorBar theme entry. EmulatorDropDown: ColorData-- The Enum.StudioStyleGuideColor.EmulatorDropDown theme entry. ErrorText: ColorData-- The Enum.StudioStyleGuideColor.ErrorText theme entry. FilterButtonAccent: ColorData-- The Enum.StudioStyleGuideColor.FilterButtonAccent theme entry. FilterButtonBorder: ColorData-- The Enum.StudioStyleGuideColor.FilterButtonBorder theme entry. FilterButtonBorderAlt: ColorData-- The Enum.StudioStyleGuideColor.FilterButtonBorderAlt theme entry. FilterButtonChecked: ColorData-- The Enum.StudioStyleGuideColor.FilterButtonChecked theme entry. FilterButtonDefault: ColorData-- The Enum.StudioStyleGuideColor.FilterButtonDefault theme entry. FilterButtonHover: ColorData-- The Enum.StudioStyleGuideColor.FilterButtonHover theme entry. GameSettingsTableItem: ColorData-- The Enum.StudioStyleGuideColor.GameSettingsTableItem theme entry. GameSettingsTooltip: ColorData-- The Enum.StudioStyleGuideColor.GameSettingsTooltip theme entry. HeaderSection: ColorData-- The Enum.StudioStyleGuideColor.HeaderSection theme entry. InfoBarWarningBackground: ColorData-- The Enum.StudioStyleGuideColor.InfoBarWarningBackground theme entry. InfoBarWarningText: ColorData-- The Enum.StudioStyleGuideColor.InfoBarWarningText theme entry. InfoText: ColorData-- The Enum.StudioStyleGuideColor.InfoText theme entry. InputFieldBackground: ColorData-- The Enum.StudioStyleGuideColor.InputFieldBackground theme entry. InputFieldBorder: ColorData-- The Enum.StudioStyleGuideColor.InputFieldBorder theme entry. Item: ColorData-- The Enum.StudioStyleGuideColor.Item theme entry. Light: ColorData-- The Enum.StudioStyleGuideColor.Light theme entry. LinkText: ColorData-- The Enum.StudioStyleGuideColor.LinkText theme entry. MainBackground: ColorData-- The Enum.StudioStyleGuideColor.MainBackground theme entry. MainButton: ColorData-- The Enum.StudioStyleGuideColor.MainButton theme entry. MainText: ColorData-- The Enum.StudioStyleGuideColor.MainText theme entry. Mid: ColorData-- The Enum.StudioStyleGuideColor.Mid theme entry. Midlight: ColorData-- The Enum.StudioStyleGuideColor.Midlight theme entry. Notification: ColorData-- The Enum.StudioStyleGuideColor.Notification theme entry. RibbonButton: ColorData-- The Enum.StudioStyleGuideColor.RibbonButton theme entry. RibbonTab: ColorData-- The Enum.StudioStyleGuideColor.RibbonTab theme entry. RibbonTabTopBar: ColorData-- The Enum.StudioStyleGuideColor.RibbonTabTopBar theme entry. ScriptBackground: ColorData-- The Enum.StudioStyleGuideColor.ScriptBackground theme entry. ScriptBool: ColorData-- The Enum.StudioStyleGuideColor.ScriptBool theme entry. ScriptBracket: ColorData-- The Enum.StudioStyleGuideColor.ScriptBracket theme entry. ScriptBuiltInFunction: ColorData-- The Enum.StudioStyleGuideColor.ScriptBuiltInFunction theme entry. ScriptComment: ColorData-- The Enum.StudioStyleGuideColor.ScriptComment theme entry. ScriptEditorCurrentLine: ColorData-- The Enum.StudioStyleGuideColor.ScriptEditorCurrentLine theme entry. ScriptError: ColorData-- The Enum.StudioStyleGuideColor.ScriptError theme entry. ScriptFindSelectionBackground: ColorData-- The Enum.StudioStyleGuideColor.ScriptFindSelectionBackground theme entry. ScriptFunction: ColorData-- The Enum.StudioStyleGuideColor.ScriptFunction theme entry. ScriptFunctionName: ColorData-- The Enum.StudioStyleGuideColor.ScriptFunctionName theme entry. ScriptKeyword: ColorData-- The Enum.StudioStyleGuideColor.ScriptKeyword theme entry. ScriptLocal: ColorData-- The Enum.StudioStyleGuideColor.ScriptLocal theme entry. ScriptLuauKeyword: ColorData-- The Enum.StudioStyleGuideColor.ScriptLuauKeyword theme entry. ScriptMatchingWordSelectionBackground: ColorData-- The Enum.StudioStyleGuideColor.ScriptMatchingWordSelectionBackground theme entry. ScriptMethod: ColorData-- The Enum.StudioStyleGuideColor.ScriptMethod theme entry. ScriptNil: ColorData-- The Enum.StudioStyleGuideColor.ScriptNil theme entry. ScriptNumber: ColorData-- The Enum.StudioStyleGuideColor.ScriptNumber theme entry. ScriptOperator: ColorData-- The Enum.StudioStyleGuideColor.ScriptOperator theme entry. ScriptProperty: ColorData-- The Enum.StudioStyleGuideColor.ScriptProperty theme entry. ScriptRuler: ColorData-- The Enum.StudioStyleGuideColor.ScriptRuler theme entry. ScriptSelectionBackground: ColorData-- The Enum.StudioStyleGuideColor.ScriptSelectionBackground theme entry. ScriptSelectionText: ColorData-- The Enum.StudioStyleGuideColor.ScriptSelectionText theme entry. ScriptSelf: ColorData-- The Enum.StudioStyleGuideColor.ScriptSelf theme entry. ScriptSideWidget: ColorData-- The Enum.StudioStyleGuideColor.ScriptSideWidget theme entry. ScriptString: ColorData-- The Enum.StudioStyleGuideColor.ScriptString theme entry. ScriptText: ColorData-- The Enum.StudioStyleGuideColor.ScriptText theme entry. ScriptTodo: ColorData-- The Enum.StudioStyleGuideColor.ScriptTodo theme entry. ScriptWarning: ColorData-- The Enum.StudioStyleGuideColor.ScriptWarning theme entry. ScriptWhitespace: ColorData-- The Enum.StudioStyleGuideColor.ScriptWhitespace theme entry. ScrollBar: ColorData-- The Enum.StudioStyleGuideColor.ScrollBar theme entry. ScrollBarBackground: ColorData-- The Enum.StudioStyleGuideColor.ScrollBarBackground theme entry. SensitiveText: ColorData-- The Enum.StudioStyleGuideColor.SensitiveText theme entry. Separator: ColorData-- The Enum.StudioStyleGuideColor.Separator theme entry. Shadow: ColorData-- The Enum.StudioStyleGuideColor.Shadow theme entry. StatusBar: ColorData-- The Enum.StudioStyleGuideColor.StatusBar theme entry. SubText: ColorData-- The Enum.StudioStyleGuideColor.SubText theme entry. Tab: ColorData-- The Enum.StudioStyleGuideColor.Tab theme entry. TabBar: ColorData-- The Enum.StudioStyleGuideColor.TabBar theme entry. TableItem: ColorData-- The Enum.StudioStyleGuideColor.TableItem theme entry. Titlebar: ColorData-- The Enum.StudioStyleGuideColor.Titlebar theme entry. TitlebarText: ColorData-- The Enum.StudioStyleGuideColor.TitlebarText theme entry. Tooltip: ColorData-- The Enum.StudioStyleGuideColor.Tooltip theme entry. ViewPortBackground: ColorData-- The Enum.StudioStyleGuideColor.ViewPortBackground theme entry. WarningText: ColorData-- The Enum.StudioStyleGuideColor.WarningText theme entry. }  "}]